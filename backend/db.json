{
  "tests": [
    {
      "id": 1,
      "year": 2024,
      "season": "haru",
      "questionId": 1,
      "label": "アジャイル開発の六つの観点",
      "question": "アジャイル開発プロセスにおいて、Bill Wakeが提案した\"INVEST\"と呼ばれる六つの観点を用いて行うことはどれか。",
      "select": {
        "s1": "効率よくアクティビティ図を作成する。",
        "s2": "コード化できるレベルまで詳細化されたデータフロー図を作成する。",
        "s3": "再利用しやすいソフトウェアパターンとなっているかどうかを評価する。",
        "s4": "質の高いユーザーストーリーとなっているかどうかを評価する。"
      },
      "ans": 3
    },
    {
      "id": 2,
      "year": 2024,
      "season": "haru",
      "questionId": 2,
      "label": "インプロセスデータベースの説明",
      "question": "組込みシステムでDBMSを用いるときには、通信のオーバーヘッド、通信負荷の発生を防ぐこと、必要なメモリ容量をリソース制限内に抑えることなどを目的として、インプロセスデータベースを用いることがある。このインプロセスデータベースの説明として、適切なものはどれか。",
      "select": {
        "s1": "クライアントサーバ形式のクライアントとなるアプリケーションプログラムとソケットを介して通信し、SQLを用いて処理を記述する。",
        "s2": "データベースエンジンはライブラリ形式で提供され、アプリケーションプログラムとリンクされて同一メモリ空間で動作する。",
        "s3": "テーブルデータの全体をメモリ上に配置して、データベース処理を高速化する。",
        "s4": "一つのテーブルを一つのファイルで管理し、アプリケーションプログラムからはファイル入出力のAPIで操作する。"
      },
      "ans": 1
    },
    {
      "id": 3,
      "year": 2024,
      "season": "haru",
      "questionId": 3,
      "label": "マイクロサービスアーキテクチャにおける方式",
      "question": "マイクロサービスアーキテクチャを採用してアプリケーションソフトウェアを設計している。障害発生による影響の範囲を局所化してシステム全体への波及を抑えるために、マイクロサービスへリクエストを送ったときのエラーが、あらかじめ設定している回数を超えた場合に、障害が解消するまでは、リクエストを送らない方式とする。この方式を何と呼ぶか。",
      "select": {
        "s1": "CQRS",
        "s2": "RPC",
        "s3": "サーキットブレーカー",
        "s4": "サービスディスカバリー"
      },
      "ans": 2
    },
    {
      "id": 4,
      "year": 2024,
      "season": "haru",
      "questionId": 4,
      "label": "オブジェクト指向におけるデザインパターン",
      "question": "オブジェクト指向におけるデザインパターンに関する記述として、適切なものはどれか。",
      "select": {
        "s1": "幾つかのクラスに共通する性質を抽出して、一般化したクラスを定義したものである。",
        "s2": "同じ性質をもつオブジェクト群を、更にクラスとして抽象化したものである。",
        "s3": "オブジェクトの内部にデータを隠蔽し、オブジェクトの仕様と実装を分離したものである。",
        "s4": "システムの構造や機能について、設計上の典型的な問題とその解決策とを示し、再利用できるようにしたものである。"
      },
      "ans": 3
    },
    {
      "id": 5,
      "year": 2024,
      "season": "haru",
      "questionId": 5,
      "label": "モジュール結合度",
      "question": "モジュール間のデータの受渡し方法のうち、最も低いモジュール結合度となるものはどれか。",
      "select": {
        "s1": "単一のデータ項目を大域的データで受け渡す。",
        "s2": "単一のデータ項目を引数で受け渡す。",
        "s3": "データ構造を大域的データで受け渡す。",
        "s4": "データ構造を引数で受け渡す。"
      },
      "ans": 1
    }
  ]
}
